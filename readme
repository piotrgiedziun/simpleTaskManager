#summary API documentation v 1.2

= Basic authentication =
 # get user token (login) - *ONLY FIRST TIME* user_token is static
{{{
URL:
POST (SITE_URL)api/get_user_token

POST:
+ username
+ password md5 hash

ex.
username=test&password=md5(test)

RETURN:
+ user_token - kept it safe!

ex.
{"user_token":"6e56c911aeac6e3bebb6f0341b929e88","is_error":false}

ERRORS (possible exceptions):
+ invalid username or password (code:3)
}}}
 # get session token request (expires after 24 hours)
{{{
URL:
GET (SITE_URL)api/get_session_token

POST:
no post data

RETURN:
+ session_token - should be stored as a local variable

ex.
{"session_token":"8370d2bc133cf0d67d7329362a309ad2","is_error":false}

ERRORS (possible exceptions):
no errors
}}}
 # try auth
{{{
URL:
POST (SITE_URL)api/assign

POST:
+ session_token - key from step two
+ user_token_hash - md5(user_token+session_token)- user_token from step one

ex.
session_token=8370d2bc133cf0d67d7329362a309ad2&user_token_hash=08b80beb8ecc63322de8435c538609d9

RETURN:
+ status

ex.
{"status":"succes","is_error":false}

ERRORS (possible exceptions):
+ invalid data (code:-1) - missing parm
+ invalid user token hash (code:-1) - md5(user_token+session_token)
+ session expired (code:1) - get new token (24h expiration time)
+ session already assigned (code:2) - a matter of fact this is not a error,
it is kind of warning (meaning you already have a valid token)
}}}

= Get data =

==tasks==
{{{
URL:
POST (SITE_URL)api/tasks/(TYPE)

TYPES:
+ create
+ update
+ delete
+ get
}}}
 # Create
{{{
URL:
POST (SITE_URL)api/tasks/create

POST:
+ message
+ priority (int 1 = 'normal', 2 = 'high')
+ status_id (int 0 = 'waiting', 1 = 'in progress', 2 = 'complete')
+ deadline (unix date int)
+ session_token - (basic authentication - point two)
+ signature - md5(API_SECRET_KEY+user_token+parms_string) - more in section "signature"

PARMS_STRING:
message=(message)&priority=(priority)&status_id=(status_id)&deadline-(deadline)&session_token=(session_token)

RETURN:
+ status

ex.
{"status":"succes","is_error":false}

ERRORS (possible exceptions):
+ validation error (code:-1)
+ invalid signature (code:5)
}}}
 # Update
{{{
URL:
POST (SITE_URL)api/tasks/update

POST:
+ message (optional*)
+ status_id (optional*)
+ priority (optional*)
+ deadline (optional*)
+ task_id
+ session_token - (basic authentication - point two)
+ signature - md5(API_SECRET_KEY+user_token+parms_string) - more in section "signature"
* at least one is required


PARMS_STRING:
[message=(message)&status_id=(status_id)...]&task_id=(task_id)&session_token=(session_token)

RETURN:
+ status

ex.
{"status":"succes","is_error":false}

ERRORS (possible exceptions):
+ invalid parms (code:-1) - task_id must be numeric
+ validation error (code:-1)
+ task not found (code:4)
+ invalid signature (code:5)
}}}

 # Delete
{{{
URL:
POST (SITE_URL)api/tasks/delete

POST:
+ task_id
+ session_token - (basic authentication - point two)
+ signature - md5(API_SECRET_KEY+user_token+parms_string) - more in section "signature"

PARMS_STRING:
task_id=(task_id)&session_token=(session_token)

RETURN:
+ status

ex.
{"status":"succes","is_error":false}

ERRORS (possible exceptions):
+ invalid parms (code:-1) - task_id must be numeric
+ task not found (code:4)
+ invalid signature (code:5)
}}}
 # Get all
{{{
URL:
POST (SITE_URL)api/tasks/get

POST:
+ session_token - (basic authentication - point two)
+ signature - md5(API_SECRET_KEY+user_token+parms_string) - more in section "signature"

PARMS_STRING:
session_token=(session_token)

RETURN:
+ array of tasks

ex.
{"tasks":[{"id":"12","message":"testowy","status_id":"0","priority":"1",updated":"1315673704",
"created":"1315673682","deadline":"1315673682"},{"id":"4","message":"testowy 2",
"status_id":"1","priority":"0",updated":"1315673604","created":"1315668369","deadline":"1315673682"},
{"id":"3","message":"testowy 3","status_id":"0","priority":"1","updated":"1315671630",
"created":"1315668324","deadline":"1315673682"}],"is_error":false}

ERRORS (possible exceptions):
+ internal error (code:-1)
+ invalid signature (code:5)
}}}
 # Get task by id
{{{
URL:
POST (SITE_URL)api/tasks/get

POST:
+ task_id
+ session_token - (basic authentication - point two)
+ signature - md5(API_SECRET_KEY+user_token+parms_string) - more in section "signature"

PARMS_STRING:
task_id=(task_id)&session_token=(session_token)

RETURN:
+ task

ex.
{"task":{"id":"12","message":"testowy","status_id":"0","priority":"1","updated":"1315673682",
"created":"1315673682",
"deadline":"1315673682"},"is_error":false}

ERRORS (possible exceptions):
+ task not found (code: 4)
+ invalid signature (code:5)
}}}

= Create account =
{{{
URL:
POST (SITE_URL)api/user/create

POST:
+ username (4 to 200 alphanumeric chars)
+ password (4 to 25 chars)
+ mail

RETURN:
+ status

ex.
{"status":"succes","user_token":"4f0747e538410","is_error":false}

ERRORS (possible exceptions):
+ invalid parms
+ invalid username (code: 100)
+ invalid password (code: 100)
+ invalid mail (code: 100)
}}}

= Signature =
signature is a way to protect data from being edited.
signature creation scheme is as follows:
 # sequence is important
 # app should have API_SECRET_KEY as constant variable
 # user_token should be stored in database
 # parms_string md5 of all data sent (of course with session_token)

schema
{{{
md5(API_SECRET_KEY+user_token+parms_string)
}}}

ex.
for following POST content
{{{
session_token=8370d2bc133cf0d67d7329362a309ad2&message=test
}}}
signature should looks like this
{{{
md5(API_SECRET_KEY+user_token+"session_token=8370d2bc133cf0d67d7329362a309ad2&message=test")
}}}
So the entire POST content should look like this
{{{
session_token=8370d2bc133cf0d67d7329362a309ad2&message=test&signature=md5(API_SECRET_KEY+user_token+"session_token=8370d2bc133cf0d67d7329362a309ad2&message=test")
}}}


= Errors =
schema
{{{
{"is_error":true,"error_code":code,"error_message":message}
}}}

Enjoy!